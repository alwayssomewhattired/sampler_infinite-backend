// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String  @id @default(uuid())
  username String @unique
  email String @unique
  password  String  @unique

  // reviews Review[]
  comments Comment[]
  reactions CommentReaction[] 
}

model Item {
  id  String  @id //@default(uuid())
  user String
  name String
  description String?

  comments Comment[]
  // reviews Review[]
}


model Comment {
  id          String @id @default(uuid())
  commentText String

  userID String?
  user   User?   @relation(fields: [userID], references: [id])

  itemID String
  item Item @relation(fields: [itemID], references: [id])

  created_at DateTime @default (now())

  reactions CommentReaction[]

  // reviewID  String
  // review Review @relation(fields: [reviewID], references: [id], onDelete: Cascade)
}

model CommentReaction {
  userID String
  commentID String
  reactionType ReactionType

  user User @relation(fields: [userID], references: [id])
  comment Comment @relation(fields: [commentID], references: [id], onDelete: Cascade)

  @@id([userID, commentID]) // Composite primary key
}

enum ReactionType {
  like
  dislike
}

// model Review {
//   id  String @id @default(uuid())
//   reviewText String

//   userID String
//   review User @relation(fields: [userID], references: [id], onDelete: Cascade)

//   itemID String
//   item Item @relation(fields: [itemID], references: [id], onDelete: Cascade)

//   @@unique([userID, itemID])
//   comments Comment[]
// }